// <auto-generated />
using System;
using CarRentalDAL.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRentalDAL.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240815170914_DB connection")]
    partial class DBconnection
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarRentalDAL.Entities.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailableForRent")
                        .HasColumnType("bit");

                    b.Property<string>("Maker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RentalPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarRentalDAL.Entities.RentalAgreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool?>("IsRequestedForReturn")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsReturnRequestAcceptedByAdmin")
                        .HasColumnType("bit");

                    b.Property<int>("TotalCost")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RentalAgreements");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b44dad79-49f8-42ae-9d39-5694177e26a7",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "67a427b0-14f9-4c90-8576-889b66318ebc",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "73e45904-b761-4e91-8166-a64f03fc2db7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd77ba6e-faed-4099-92dd-8b596db56e2a",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELfabg5atGsdsUxt52Ly/SRiMiluxzzs88BfV55Qk3zaVjZWLldL5PPUMIYK7BSqdw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b050d7c0-0610-4d37-984a-bdd976821f6f",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "4201958c-2511-4bdf-843d-1b37c2254ecd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee5ab57f-3745-47b8-829c-db432f3b7acf",
                            Email = "aditi@abc.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADITI@ABC.COM",
                            NormalizedUserName = "ADITI",
                            PasswordHash = "AQAAAAEAACcQAAAAEL0/L2Iteh+hebcCqIpS/kJ1WJNfE3sQi3pd/cIQmF4nTwB/i9EzWGkzYHPudh6z0w==",
                            PhoneNumber = "1111111111",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "4971a106-4f84-46d9-a92c-948c07918df6",
                            TwoFactorEnabled = false,
                            UserName = "Aditi"
                        },
                        new
                        {
                            Id = "9aeaca64-69de-4939-ad41-5a7a43e5dafd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "203b7b91-5b4b-42d2-8cbb-77c4619d0101",
                            Email = "manish@abc.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANISH@ABC.COM",
                            NormalizedUserName = "MANISH",
                            PasswordHash = "AQAAAAEAACcQAAAAECLvdYvy3cutSc+3L4/nCQi0OP51ktLp/rOy4RkWYXoOtK5Zhe7lvgjNeaeS1GZ/HQ==",
                            PhoneNumber = "2222222222",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "684e9e49-821c-416a-bb89-206fab818d61",
                            TwoFactorEnabled = false,
                            UserName = "Manish"
                        },
                        new
                        {
                            Id = "926bd8de-5731-41db-9364-415300679cb2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65a9678c-937f-4e59-8ed6-6bdc521f9717",
                            Email = "ankit@abc.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANKIT@ABC.COM",
                            NormalizedUserName = "ANKIT",
                            PasswordHash = "AQAAAAEAACcQAAAAEPSulCPh2fFa1f7C3BVYrTHTDeomS4DU1OIJP1CQL96b3YT97360Twx6YztPO6qkfw==",
                            PhoneNumber = "3333333333",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "77914479-9a68-463c-ac31-3f57954c01df",
                            TwoFactorEnabled = false,
                            UserName = "Ankit"
                        },
                        new
                        {
                            Id = "8eeabcab-16fc-4da9-80fb-39c1df4439b7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c712c53-af70-4d44-822d-0584304b4ef0",
                            Email = "sachin@abc.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SACHIN@ABC.COM",
                            NormalizedUserName = "SACHIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEGN+juri37gOrOGueMxtKWz6KitpRF6Kq2sZjj9Fpy1xwpIeVZelx6HfyDnT1tig2g==",
                            PhoneNumber = "4444444444",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "9acb4799-20e8-4980-a7d1-f75f4a634b90",
                            TwoFactorEnabled = false,
                            UserName = "Sachin"
                        },
                        new
                        {
                            Id = "3bf9a26c-7f5e-4ae1-ae65-85544ff644b7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9236cbae-077c-4ec2-b1b8-a2985dc2df82",
                            Email = "devesh@abc.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DEVESH@ABC.COM",
                            NormalizedUserName = "DEVESH",
                            PasswordHash = "AQAAAAEAACcQAAAAEMVjA0krlOljndPVbtGLdTMoSAoIZ5bYiQ4p5mnmDdaYrbVk+gxND8hZuKQoBP01cw==",
                            PhoneNumber = "5555555555",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5e30813c-4242-4069-92de-d8dfff786e59",
                            TwoFactorEnabled = false,
                            UserName = "Devesh"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "73e45904-b761-4e91-8166-a64f03fc2db7",
                            RoleId = "b44dad79-49f8-42ae-9d39-5694177e26a7"
                        },
                        new
                        {
                            UserId = "4201958c-2511-4bdf-843d-1b37c2254ecd",
                            RoleId = "67a427b0-14f9-4c90-8576-889b66318ebc"
                        },
                        new
                        {
                            UserId = "9aeaca64-69de-4939-ad41-5a7a43e5dafd",
                            RoleId = "67a427b0-14f9-4c90-8576-889b66318ebc"
                        },
                        new
                        {
                            UserId = "926bd8de-5731-41db-9364-415300679cb2",
                            RoleId = "67a427b0-14f9-4c90-8576-889b66318ebc"
                        },
                        new
                        {
                            UserId = "8eeabcab-16fc-4da9-80fb-39c1df4439b7",
                            RoleId = "67a427b0-14f9-4c90-8576-889b66318ebc"
                        },
                        new
                        {
                            UserId = "3bf9a26c-7f5e-4ae1-ae65-85544ff644b7",
                            RoleId = "67a427b0-14f9-4c90-8576-889b66318ebc"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
